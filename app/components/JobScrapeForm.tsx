"use client";

import { useState, useEffect } from "react";
import { useMutation } from "convex/react";
import { api } from "../../convex/_generated/api";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { buildLinkedInJobSearchUrl, DEFAULT_JOB_SEARCH_DISTANCE_KM, DEFAULT_JOB_SEARCH_TIME_RANGE } from "@/lib/linkedin";
import { useToast } from "@/hooks/use-toast";

interface JobScrapeFormProps {
  onClose: () => void;
}

const TIME_RANGE_OPTIONS = [
  { value: DEFAULT_JOB_SEARCH_TIME_RANGE, label: "Past 24 hours" },
  { value: "r604800", label: "Past week" },
  { value: "r2592000", label: "Past month" },
  { value: "", label: "Any time" },
];

export default function JobScrapeForm({ onClose }: JobScrapeFormProps) {
  const [name, setName] = useState("");
  const [linkedinUrl, setLinkedinUrl] = useState("");
  const [loading, setLoading] = useState(false);
  const [urlManuallyEdited, setUrlManuallyEdited] = useState(false);
  const [locationQuery, setLocationQuery] = useState("");
  const [postedWithin, setPostedWithin] = useState<string>(DEFAULT_JOB_SEARCH_TIME_RANGE);

  const createJobScrape = useMutation(api.jobScraping.createJobScrape);
  const { toast } = useToast();

  // Auto-generate LinkedIn URL from scrape name
  useEffect(() => {
    if (name && !urlManuallyEdited) {
      const autoGeneratedUrl = buildLinkedInJobSearchUrl({
        keywords: name,
        location: locationQuery.trim() || undefined,
        timeRange: postedWithin ? postedWithin : undefined,
        distance: locationQuery.trim() ? DEFAULT_JOB_SEARCH_DISTANCE_KM : undefined,
      });
      setLinkedinUrl(autoGeneratedUrl);
    }
  }, [name, locationQuery, postedWithin, urlManuallyEdited]);

  const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setName(e.target.value);
    // Reset manual edit flag when user changes the name
    setUrlManuallyEdited(false);
  };

  const handleUrlChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setLinkedinUrl(e.target.value);
    // Mark URL as manually edited when user changes it directly
    setUrlManuallyEdited(true);
  };

  const handleLocationChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setLocationQuery(e.target.value);
    setUrlManuallyEdited(false);
  };

  const handleTimeRangeChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setPostedWithin(e.target.value);
    setUrlManuallyEdited(false);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);

    try {
      // Validate LinkedIn URL
      if (!linkedinUrl.includes('linkedin.com/jobs/search')) {
        toast({
          variant: "destructive",
          title: "Validation error",
          description: "Please enter a valid LinkedIn job search URL",
        });
        return;
      }

      await createJobScrape({
        name,
        linkedinUrl,
      });

      toast({
        title: "Search started",
        description: "Your job search has been created and will begin shortly.",
      });

      onClose();
    } catch (error) {
      console.error("Error creating job search:", error);
      toast({
        variant: "destructive",
        title: "Error",
        description: "Error creating job search: " + (error instanceof Error ? error.message : "Unknown error"),
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white dark:bg-gray-800 p-6 rounded-lg max-w-md w-full mx-4">
        <h2 className="text-xl font-bold mb-4">New One-Time Search</h2>
        <form onSubmit={handleSubmit} className="space-y-4">
        <div className="space-y-2">
          <Label htmlFor="name">Search Name</Label>
          <Input
            id="name"
            value={name}
            onChange={handleNameChange}
            placeholder="e.g., Frontend Developer Jobs"
            required
          />
          <p className="text-xs text-muted-foreground">
            LinkedIn URL will auto-generate based on your search name
          </p>
        </div>

        <div className="grid gap-4 sm:grid-cols-2">
          <div className="space-y-2">
            <Label htmlFor="location">Location (optional)</Label>
            <Input
              id="location"
              value={locationQuery}
              onChange={handleLocationChange}
              placeholder="Amsterdam, Netherlands"
              autoComplete="off"
            />
            <p className="text-xs text-muted-foreground">
              Leave blank for a global search. Distance defaults to {DEFAULT_JOB_SEARCH_DISTANCE_KM}km when a location is provided.
            </p>
          </div>
          <div className="space-y-2">
            <Label htmlFor="postedWithin">Posted within</Label>
            <select
              id="postedWithin"
              value={postedWithin}
              onChange={handleTimeRangeChange}
              className="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50"
            >
              {TIME_RANGE_OPTIONS.map((option) => (
                <option key={option.value || "any"} value={option.value}>
                  {option.label}
                </option>
              ))}
            </select>
            <p className="text-xs text-muted-foreground">
              Choose how fresh the results should be.
            </p>
          </div>
        </div>

        <div className="space-y-2">
          <Label htmlFor="linkedinUrl">LinkedIn Job Search URL</Label>
          <Input
            id="linkedinUrl"
              type="url"
              value={linkedinUrl}
              onChange={handleUrlChange}
              placeholder="https://www.linkedin.com/jobs/search/?keywords=..."
              required
            />
            <p className="text-xs text-muted-foreground">
              Auto-populated. You can edit this URL manually if needed.
            </p>
            <p className="text-xs text-muted-foreground">
              Apify runs with the workspace API key configured via environment variables.
            </p>
          </div>

          <div className="flex gap-2 pt-4">
            <Button className="flex-1 bg-primary text-primary-foreground border-primary hover:bg-primary/90 hover:text-primary-foreground shadow-none" type="submit" disabled={loading}>
              {loading ? "Starting..." : "Start Search"}
            </Button>
            <Button
              type="button"
              variant="outline"
              onClick={onClose}
              disabled={loading}
              className="flex-1"
            >
              Cancel
            </Button>
          </div>
        </form>
      </div>
    </div>
  );
}
